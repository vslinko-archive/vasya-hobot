//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
Authentication = module.exports.Authentication = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
Authentication.prototype = {};
Authentication.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication.prototype.write = function(output) {
  output.writeStructBegin('Authentication');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Chat = module.exports.Chat = function(args) {
  this.activityTimestamp = null;
  this.blob = null;
  this.bookmarked = null;
  this.description = null;
  this.dialogPartner = null;
  this.friendlyName = null;
  this.guideLines = null;
  this.myRole = null;
  this.myStatus = null;
  this.name = null;
  this.options = null;
  this.passwordHint = null;
  this.status = null;
  this.timestamp = null;
  this.topic = null;
  this.topicXML = null;
  this.type = null;
  if (args) {
    if (args.activityTimestamp !== undefined) {
      this.activityTimestamp = args.activityTimestamp;
    }
    if (args.blob !== undefined) {
      this.blob = args.blob;
    }
    if (args.bookmarked !== undefined) {
      this.bookmarked = args.bookmarked;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.dialogPartner !== undefined) {
      this.dialogPartner = args.dialogPartner;
    }
    if (args.friendlyName !== undefined) {
      this.friendlyName = args.friendlyName;
    }
    if (args.guideLines !== undefined) {
      this.guideLines = args.guideLines;
    }
    if (args.myRole !== undefined) {
      this.myRole = args.myRole;
    }
    if (args.myStatus !== undefined) {
      this.myStatus = args.myStatus;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.options !== undefined) {
      this.options = args.options;
    }
    if (args.passwordHint !== undefined) {
      this.passwordHint = args.passwordHint;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.topic !== undefined) {
      this.topic = args.topic;
    }
    if (args.topicXML !== undefined) {
      this.topicXML = args.topicXML;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
Chat.prototype = {};
Chat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activityTimestamp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.blob = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.bookmarked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.dialogPartner = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.friendlyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.guideLines = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.myRole = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.myStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I16) {
        this.options = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.passwordHint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.timestamp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.topic = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.topicXML = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Chat.prototype.write = function(output) {
  output.writeStructBegin('Chat');
  if (this.activityTimestamp !== null && this.activityTimestamp !== undefined) {
    output.writeFieldBegin('activityTimestamp', Thrift.Type.I32, 3);
    output.writeI32(this.activityTimestamp);
    output.writeFieldEnd();
  }
  if (this.blob !== null && this.blob !== undefined) {
    output.writeFieldBegin('blob', Thrift.Type.STRING, 6);
    output.writeString(this.blob);
    output.writeFieldEnd();
  }
  if (this.bookmarked !== null && this.bookmarked !== undefined) {
    output.writeFieldBegin('bookmarked', Thrift.Type.BOOL, 7);
    output.writeBool(this.bookmarked);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 9);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.dialogPartner !== null && this.dialogPartner !== undefined) {
    output.writeFieldBegin('dialogPartner', Thrift.Type.STRING, 10);
    output.writeString(this.dialogPartner);
    output.writeFieldEnd();
  }
  if (this.friendlyName !== null && this.friendlyName !== undefined) {
    output.writeFieldBegin('friendlyName', Thrift.Type.STRING, 11);
    output.writeString(this.friendlyName);
    output.writeFieldEnd();
  }
  if (this.guideLines !== null && this.guideLines !== undefined) {
    output.writeFieldBegin('guideLines', Thrift.Type.STRING, 12);
    output.writeString(this.guideLines);
    output.writeFieldEnd();
  }
  if (this.myRole !== null && this.myRole !== undefined) {
    output.writeFieldBegin('myRole', Thrift.Type.STRING, 16);
    output.writeString(this.myRole);
    output.writeFieldEnd();
  }
  if (this.myStatus !== null && this.myStatus !== undefined) {
    output.writeFieldBegin('myStatus', Thrift.Type.STRING, 17);
    output.writeString(this.myStatus);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 18);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.I16, 19);
    output.writeI16(this.options);
    output.writeFieldEnd();
  }
  if (this.passwordHint !== null && this.passwordHint !== undefined) {
    output.writeFieldBegin('passwordHint', Thrift.Type.STRING, 20);
    output.writeString(this.passwordHint);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 23);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I32, 24);
    output.writeI32(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.topic !== null && this.topic !== undefined) {
    output.writeFieldBegin('topic', Thrift.Type.STRING, 25);
    output.writeString(this.topic);
    output.writeFieldEnd();
  }
  if (this.topicXML !== null && this.topicXML !== undefined) {
    output.writeFieldBegin('topicXML', Thrift.Type.STRING, 26);
    output.writeString(this.topicXML);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 27);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = module.exports.User = function(args) {
  this.about = null;
  this.buddyStatus = null;
  this.canLeaveVoicemail = null;
  this.city = null;
  this.country = null;
  this.countryCode = null;
  this.displayName = null;
  this.fullName = null;
  this.handle = null;
  this.hasCallEquipment = null;
  this.homepage = null;
  this.isAuthorized = null;
  this.isBlocked = null;
  this.isCallForwardActive = null;
  this.isSkypeOutContact = null;
  this.isVideoCapable = null;
  this.isVoicemailCapable = null;
  this.language = null;
  this.languageCode = null;
  this.lastOnline = null;
  this.moodText = null;
  this.numberOfAuthBuddies = null;
  this.onlineStatus = null;
  this.phoneHome = null;
  this.phoneMobile = null;
  this.phoneOffice = null;
  this.province = null;
  this.receivedAuthRequest = null;
  this.richMoodText = null;
  this.sex = null;
  this.speedDial = null;
  this.timezone = null;
  if (args) {
    if (args.about !== undefined) {
      this.about = args.about;
    }
    if (args.buddyStatus !== undefined) {
      this.buddyStatus = args.buddyStatus;
    }
    if (args.canLeaveVoicemail !== undefined) {
      this.canLeaveVoicemail = args.canLeaveVoicemail;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.countryCode !== undefined) {
      this.countryCode = args.countryCode;
    }
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
    if (args.fullName !== undefined) {
      this.fullName = args.fullName;
    }
    if (args.handle !== undefined) {
      this.handle = args.handle;
    }
    if (args.hasCallEquipment !== undefined) {
      this.hasCallEquipment = args.hasCallEquipment;
    }
    if (args.homepage !== undefined) {
      this.homepage = args.homepage;
    }
    if (args.isAuthorized !== undefined) {
      this.isAuthorized = args.isAuthorized;
    }
    if (args.isBlocked !== undefined) {
      this.isBlocked = args.isBlocked;
    }
    if (args.isCallForwardActive !== undefined) {
      this.isCallForwardActive = args.isCallForwardActive;
    }
    if (args.isSkypeOutContact !== undefined) {
      this.isSkypeOutContact = args.isSkypeOutContact;
    }
    if (args.isVideoCapable !== undefined) {
      this.isVideoCapable = args.isVideoCapable;
    }
    if (args.isVoicemailCapable !== undefined) {
      this.isVoicemailCapable = args.isVoicemailCapable;
    }
    if (args.language !== undefined) {
      this.language = args.language;
    }
    if (args.languageCode !== undefined) {
      this.languageCode = args.languageCode;
    }
    if (args.lastOnline !== undefined) {
      this.lastOnline = args.lastOnline;
    }
    if (args.moodText !== undefined) {
      this.moodText = args.moodText;
    }
    if (args.numberOfAuthBuddies !== undefined) {
      this.numberOfAuthBuddies = args.numberOfAuthBuddies;
    }
    if (args.onlineStatus !== undefined) {
      this.onlineStatus = args.onlineStatus;
    }
    if (args.phoneHome !== undefined) {
      this.phoneHome = args.phoneHome;
    }
    if (args.phoneMobile !== undefined) {
      this.phoneMobile = args.phoneMobile;
    }
    if (args.phoneOffice !== undefined) {
      this.phoneOffice = args.phoneOffice;
    }
    if (args.province !== undefined) {
      this.province = args.province;
    }
    if (args.receivedAuthRequest !== undefined) {
      this.receivedAuthRequest = args.receivedAuthRequest;
    }
    if (args.richMoodText !== undefined) {
      this.richMoodText = args.richMoodText;
    }
    if (args.sex !== undefined) {
      this.sex = args.sex;
    }
    if (args.speedDial !== undefined) {
      this.speedDial = args.speedDial;
    }
    if (args.timezone !== undefined) {
      this.timezone = args.timezone;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.about = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.buddyStatus = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.canLeaveVoicemail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.handle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.hasCallEquipment = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.homepage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.isAuthorized = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.isBlocked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.isCallForwardActive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.isSkypeOutContact = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.isVideoCapable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.isVoicemailCapable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.languageCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.lastOnline = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.moodText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I16) {
        this.numberOfAuthBuddies = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.onlineStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.phoneHome = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.phoneMobile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.phoneOffice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.receivedAuthRequest = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.richMoodText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.sex = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.speedDial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.timezone = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.about !== null && this.about !== undefined) {
    output.writeFieldBegin('about', Thrift.Type.STRING, 1);
    output.writeString(this.about);
    output.writeFieldEnd();
  }
  if (this.buddyStatus !== null && this.buddyStatus !== undefined) {
    output.writeFieldBegin('buddyStatus', Thrift.Type.I16, 4);
    output.writeI16(this.buddyStatus);
    output.writeFieldEnd();
  }
  if (this.canLeaveVoicemail !== null && this.canLeaveVoicemail !== undefined) {
    output.writeFieldBegin('canLeaveVoicemail', Thrift.Type.BOOL, 5);
    output.writeBool(this.canLeaveVoicemail);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 6);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 7);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 8);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 9);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 10);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  if (this.handle !== null && this.handle !== undefined) {
    output.writeFieldBegin('handle', Thrift.Type.STRING, 11);
    output.writeString(this.handle);
    output.writeFieldEnd();
  }
  if (this.hasCallEquipment !== null && this.hasCallEquipment !== undefined) {
    output.writeFieldBegin('hasCallEquipment', Thrift.Type.BOOL, 12);
    output.writeBool(this.hasCallEquipment);
    output.writeFieldEnd();
  }
  if (this.homepage !== null && this.homepage !== undefined) {
    output.writeFieldBegin('homepage', Thrift.Type.STRING, 13);
    output.writeString(this.homepage);
    output.writeFieldEnd();
  }
  if (this.isAuthorized !== null && this.isAuthorized !== undefined) {
    output.writeFieldBegin('isAuthorized', Thrift.Type.BOOL, 14);
    output.writeBool(this.isAuthorized);
    output.writeFieldEnd();
  }
  if (this.isBlocked !== null && this.isBlocked !== undefined) {
    output.writeFieldBegin('isBlocked', Thrift.Type.BOOL, 15);
    output.writeBool(this.isBlocked);
    output.writeFieldEnd();
  }
  if (this.isCallForwardActive !== null && this.isCallForwardActive !== undefined) {
    output.writeFieldBegin('isCallForwardActive', Thrift.Type.BOOL, 16);
    output.writeBool(this.isCallForwardActive);
    output.writeFieldEnd();
  }
  if (this.isSkypeOutContact !== null && this.isSkypeOutContact !== undefined) {
    output.writeFieldBegin('isSkypeOutContact', Thrift.Type.BOOL, 17);
    output.writeBool(this.isSkypeOutContact);
    output.writeFieldEnd();
  }
  if (this.isVideoCapable !== null && this.isVideoCapable !== undefined) {
    output.writeFieldBegin('isVideoCapable', Thrift.Type.BOOL, 18);
    output.writeBool(this.isVideoCapable);
    output.writeFieldEnd();
  }
  if (this.isVoicemailCapable !== null && this.isVoicemailCapable !== undefined) {
    output.writeFieldBegin('isVoicemailCapable', Thrift.Type.BOOL, 19);
    output.writeBool(this.isVoicemailCapable);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 20);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.languageCode !== null && this.languageCode !== undefined) {
    output.writeFieldBegin('languageCode', Thrift.Type.STRING, 21);
    output.writeString(this.languageCode);
    output.writeFieldEnd();
  }
  if (this.lastOnline !== null && this.lastOnline !== undefined) {
    output.writeFieldBegin('lastOnline', Thrift.Type.I32, 22);
    output.writeI32(this.lastOnline);
    output.writeFieldEnd();
  }
  if (this.moodText !== null && this.moodText !== undefined) {
    output.writeFieldBegin('moodText', Thrift.Type.STRING, 24);
    output.writeString(this.moodText);
    output.writeFieldEnd();
  }
  if (this.numberOfAuthBuddies !== null && this.numberOfAuthBuddies !== undefined) {
    output.writeFieldBegin('numberOfAuthBuddies', Thrift.Type.I16, 25);
    output.writeI16(this.numberOfAuthBuddies);
    output.writeFieldEnd();
  }
  if (this.onlineStatus !== null && this.onlineStatus !== undefined) {
    output.writeFieldBegin('onlineStatus', Thrift.Type.STRING, 26);
    output.writeString(this.onlineStatus);
    output.writeFieldEnd();
  }
  if (this.phoneHome !== null && this.phoneHome !== undefined) {
    output.writeFieldBegin('phoneHome', Thrift.Type.STRING, 27);
    output.writeString(this.phoneHome);
    output.writeFieldEnd();
  }
  if (this.phoneMobile !== null && this.phoneMobile !== undefined) {
    output.writeFieldBegin('phoneMobile', Thrift.Type.STRING, 28);
    output.writeString(this.phoneMobile);
    output.writeFieldEnd();
  }
  if (this.phoneOffice !== null && this.phoneOffice !== undefined) {
    output.writeFieldBegin('phoneOffice', Thrift.Type.STRING, 29);
    output.writeString(this.phoneOffice);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 30);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.receivedAuthRequest !== null && this.receivedAuthRequest !== undefined) {
    output.writeFieldBegin('receivedAuthRequest', Thrift.Type.STRING, 31);
    output.writeString(this.receivedAuthRequest);
    output.writeFieldEnd();
  }
  if (this.richMoodText !== null && this.richMoodText !== undefined) {
    output.writeFieldBegin('richMoodText', Thrift.Type.STRING, 32);
    output.writeString(this.richMoodText);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.STRING, 33);
    output.writeString(this.sex);
    output.writeFieldEnd();
  }
  if (this.speedDial !== null && this.speedDial !== undefined) {
    output.writeFieldBegin('speedDial', Thrift.Type.STRING, 34);
    output.writeString(this.speedDial);
    output.writeFieldEnd();
  }
  if (this.timezone !== null && this.timezone !== undefined) {
    output.writeFieldBegin('timezone', Thrift.Type.I32, 35);
    output.writeI32(this.timezone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationException = module.exports.AuthenticationException = function(args) {
  Thrift.TException.call(this, "AuthenticationException")
  this.name = "AuthenticationException"
};
Thrift.inherits(AuthenticationException, Thrift.TException);
AuthenticationException.prototype.name = 'AuthenticationException';
AuthenticationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationException.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationException');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

