#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Authentication:
  """
  Vasya Hobot

  Copyright (c) 2013-2014 Vyacheslav Slinko
  Licensed under the MIT License

  Attributes:
   - token
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'token', None, None, ), # 1
  )

  def __init__(self, token=None,):
    self.token = token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Authentication')
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 1)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.token is None:
      raise TProtocol.TProtocolException(message='Required field token is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Chat:
  """
  Attributes:
   - activityTimestamp
   - blob
   - bookmarked
   - description
   - dialogPartner
   - friendlyName
   - guideLines
   - myRole
   - myStatus
   - name
   - options
   - passwordHint
   - status
   - timestamp
   - topic
   - topicXML
   - type
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    (3, TType.I32, 'activityTimestamp', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.STRING, 'blob', None, None, ), # 6
    (7, TType.BOOL, 'bookmarked', None, None, ), # 7
    None, # 8
    (9, TType.STRING, 'description', None, None, ), # 9
    (10, TType.STRING, 'dialogPartner', None, None, ), # 10
    (11, TType.STRING, 'friendlyName', None, None, ), # 11
    (12, TType.STRING, 'guideLines', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    (16, TType.STRING, 'myRole', None, None, ), # 16
    (17, TType.STRING, 'myStatus', None, None, ), # 17
    (18, TType.STRING, 'name', None, None, ), # 18
    (19, TType.I16, 'options', None, None, ), # 19
    (20, TType.STRING, 'passwordHint', None, None, ), # 20
    None, # 21
    None, # 22
    (23, TType.STRING, 'status', None, None, ), # 23
    (24, TType.I32, 'timestamp', None, None, ), # 24
    (25, TType.STRING, 'topic', None, None, ), # 25
    (26, TType.STRING, 'topicXML', None, None, ), # 26
    (27, TType.STRING, 'type', None, None, ), # 27
  )

  def __init__(self, activityTimestamp=None, blob=None, bookmarked=None, description=None, dialogPartner=None, friendlyName=None, guideLines=None, myRole=None, myStatus=None, name=None, options=None, passwordHint=None, status=None, timestamp=None, topic=None, topicXML=None, type=None,):
    self.activityTimestamp = activityTimestamp
    self.blob = blob
    self.bookmarked = bookmarked
    self.description = description
    self.dialogPartner = dialogPartner
    self.friendlyName = friendlyName
    self.guideLines = guideLines
    self.myRole = myRole
    self.myStatus = myStatus
    self.name = name
    self.options = options
    self.passwordHint = passwordHint
    self.status = status
    self.timestamp = timestamp
    self.topic = topic
    self.topicXML = topicXML
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 3:
        if ftype == TType.I32:
          self.activityTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.blob = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.bookmarked = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.dialogPartner = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.friendlyName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.guideLines = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.myRole = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.myStatus = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I16:
          self.options = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.passwordHint = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.topic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.topicXML = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Chat')
    if self.activityTimestamp is not None:
      oprot.writeFieldBegin('activityTimestamp', TType.I32, 3)
      oprot.writeI32(self.activityTimestamp)
      oprot.writeFieldEnd()
    if self.blob is not None:
      oprot.writeFieldBegin('blob', TType.STRING, 6)
      oprot.writeString(self.blob)
      oprot.writeFieldEnd()
    if self.bookmarked is not None:
      oprot.writeFieldBegin('bookmarked', TType.BOOL, 7)
      oprot.writeBool(self.bookmarked)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 9)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.dialogPartner is not None:
      oprot.writeFieldBegin('dialogPartner', TType.STRING, 10)
      oprot.writeString(self.dialogPartner)
      oprot.writeFieldEnd()
    if self.friendlyName is not None:
      oprot.writeFieldBegin('friendlyName', TType.STRING, 11)
      oprot.writeString(self.friendlyName)
      oprot.writeFieldEnd()
    if self.guideLines is not None:
      oprot.writeFieldBegin('guideLines', TType.STRING, 12)
      oprot.writeString(self.guideLines)
      oprot.writeFieldEnd()
    if self.myRole is not None:
      oprot.writeFieldBegin('myRole', TType.STRING, 16)
      oprot.writeString(self.myRole)
      oprot.writeFieldEnd()
    if self.myStatus is not None:
      oprot.writeFieldBegin('myStatus', TType.STRING, 17)
      oprot.writeString(self.myStatus)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 18)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.options is not None:
      oprot.writeFieldBegin('options', TType.I16, 19)
      oprot.writeI16(self.options)
      oprot.writeFieldEnd()
    if self.passwordHint is not None:
      oprot.writeFieldBegin('passwordHint', TType.STRING, 20)
      oprot.writeString(self.passwordHint)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 23)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I32, 24)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.topic is not None:
      oprot.writeFieldBegin('topic', TType.STRING, 25)
      oprot.writeString(self.topic)
      oprot.writeFieldEnd()
    if self.topicXML is not None:
      oprot.writeFieldBegin('topicXML', TType.STRING, 26)
      oprot.writeString(self.topicXML)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 27)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.activityTimestamp is None:
      raise TProtocol.TProtocolException(message='Required field activityTimestamp is unset!')
    if self.blob is None:
      raise TProtocol.TProtocolException(message='Required field blob is unset!')
    if self.bookmarked is None:
      raise TProtocol.TProtocolException(message='Required field bookmarked is unset!')
    if self.description is None:
      raise TProtocol.TProtocolException(message='Required field description is unset!')
    if self.dialogPartner is None:
      raise TProtocol.TProtocolException(message='Required field dialogPartner is unset!')
    if self.friendlyName is None:
      raise TProtocol.TProtocolException(message='Required field friendlyName is unset!')
    if self.guideLines is None:
      raise TProtocol.TProtocolException(message='Required field guideLines is unset!')
    if self.myRole is None:
      raise TProtocol.TProtocolException(message='Required field myRole is unset!')
    if self.myStatus is None:
      raise TProtocol.TProtocolException(message='Required field myStatus is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.options is None:
      raise TProtocol.TProtocolException(message='Required field options is unset!')
    if self.passwordHint is None:
      raise TProtocol.TProtocolException(message='Required field passwordHint is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.topic is None:
      raise TProtocol.TProtocolException(message='Required field topic is unset!')
    if self.topicXML is None:
      raise TProtocol.TProtocolException(message='Required field topicXML is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - about
   - buddyStatus
   - canLeaveVoicemail
   - city
   - country
   - countryCode
   - displayName
   - fullName
   - handle
   - hasCallEquipment
   - homepage
   - isAuthorized
   - isBlocked
   - isCallForwardActive
   - isSkypeOutContact
   - isVideoCapable
   - isVoicemailCapable
   - language
   - languageCode
   - lastOnline
   - moodText
   - numberOfAuthBuddies
   - onlineStatus
   - phoneHome
   - phoneMobile
   - phoneOffice
   - province
   - receivedAuthRequest
   - richMoodText
   - sex
   - speedDial
   - timezone
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'about', None, None, ), # 1
    None, # 2
    None, # 3
    (4, TType.I16, 'buddyStatus', None, None, ), # 4
    (5, TType.BOOL, 'canLeaveVoicemail', None, None, ), # 5
    (6, TType.STRING, 'city', None, None, ), # 6
    (7, TType.STRING, 'country', None, None, ), # 7
    (8, TType.STRING, 'countryCode', None, None, ), # 8
    (9, TType.STRING, 'displayName', None, None, ), # 9
    (10, TType.STRING, 'fullName', None, None, ), # 10
    (11, TType.STRING, 'handle', None, None, ), # 11
    (12, TType.BOOL, 'hasCallEquipment', None, None, ), # 12
    (13, TType.STRING, 'homepage', None, None, ), # 13
    (14, TType.BOOL, 'isAuthorized', None, None, ), # 14
    (15, TType.BOOL, 'isBlocked', None, None, ), # 15
    (16, TType.BOOL, 'isCallForwardActive', None, None, ), # 16
    (17, TType.BOOL, 'isSkypeOutContact', None, None, ), # 17
    (18, TType.BOOL, 'isVideoCapable', None, None, ), # 18
    (19, TType.BOOL, 'isVoicemailCapable', None, None, ), # 19
    (20, TType.STRING, 'language', None, None, ), # 20
    (21, TType.STRING, 'languageCode', None, None, ), # 21
    (22, TType.I32, 'lastOnline', None, None, ), # 22
    None, # 23
    (24, TType.STRING, 'moodText', None, None, ), # 24
    (25, TType.I16, 'numberOfAuthBuddies', None, None, ), # 25
    (26, TType.STRING, 'onlineStatus', None, None, ), # 26
    (27, TType.STRING, 'phoneHome', None, None, ), # 27
    (28, TType.STRING, 'phoneMobile', None, None, ), # 28
    (29, TType.STRING, 'phoneOffice', None, None, ), # 29
    (30, TType.STRING, 'province', None, None, ), # 30
    (31, TType.STRING, 'receivedAuthRequest', None, None, ), # 31
    (32, TType.STRING, 'richMoodText', None, None, ), # 32
    (33, TType.STRING, 'sex', None, None, ), # 33
    (34, TType.STRING, 'speedDial', None, None, ), # 34
    (35, TType.I32, 'timezone', None, None, ), # 35
  )

  def __init__(self, about=None, buddyStatus=None, canLeaveVoicemail=None, city=None, country=None, countryCode=None, displayName=None, fullName=None, handle=None, hasCallEquipment=None, homepage=None, isAuthorized=None, isBlocked=None, isCallForwardActive=None, isSkypeOutContact=None, isVideoCapable=None, isVoicemailCapable=None, language=None, languageCode=None, lastOnline=None, moodText=None, numberOfAuthBuddies=None, onlineStatus=None, phoneHome=None, phoneMobile=None, phoneOffice=None, province=None, receivedAuthRequest=None, richMoodText=None, sex=None, speedDial=None, timezone=None,):
    self.about = about
    self.buddyStatus = buddyStatus
    self.canLeaveVoicemail = canLeaveVoicemail
    self.city = city
    self.country = country
    self.countryCode = countryCode
    self.displayName = displayName
    self.fullName = fullName
    self.handle = handle
    self.hasCallEquipment = hasCallEquipment
    self.homepage = homepage
    self.isAuthorized = isAuthorized
    self.isBlocked = isBlocked
    self.isCallForwardActive = isCallForwardActive
    self.isSkypeOutContact = isSkypeOutContact
    self.isVideoCapable = isVideoCapable
    self.isVoicemailCapable = isVoicemailCapable
    self.language = language
    self.languageCode = languageCode
    self.lastOnline = lastOnline
    self.moodText = moodText
    self.numberOfAuthBuddies = numberOfAuthBuddies
    self.onlineStatus = onlineStatus
    self.phoneHome = phoneHome
    self.phoneMobile = phoneMobile
    self.phoneOffice = phoneOffice
    self.province = province
    self.receivedAuthRequest = receivedAuthRequest
    self.richMoodText = richMoodText
    self.sex = sex
    self.speedDial = speedDial
    self.timezone = timezone

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.about = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.buddyStatus = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.canLeaveVoicemail = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.countryCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.displayName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.fullName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.handle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.hasCallEquipment = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.homepage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.isAuthorized = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.isBlocked = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.isCallForwardActive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.isSkypeOutContact = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.isVideoCapable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.BOOL:
          self.isVoicemailCapable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.languageCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.lastOnline = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.moodText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I16:
          self.numberOfAuthBuddies = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.onlineStatus = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.phoneHome = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.phoneMobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.phoneOffice = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.province = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.receivedAuthRequest = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.richMoodText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.sex = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.speedDial = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.timezone = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.about is not None:
      oprot.writeFieldBegin('about', TType.STRING, 1)
      oprot.writeString(self.about)
      oprot.writeFieldEnd()
    if self.buddyStatus is not None:
      oprot.writeFieldBegin('buddyStatus', TType.I16, 4)
      oprot.writeI16(self.buddyStatus)
      oprot.writeFieldEnd()
    if self.canLeaveVoicemail is not None:
      oprot.writeFieldBegin('canLeaveVoicemail', TType.BOOL, 5)
      oprot.writeBool(self.canLeaveVoicemail)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 6)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 7)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.countryCode is not None:
      oprot.writeFieldBegin('countryCode', TType.STRING, 8)
      oprot.writeString(self.countryCode)
      oprot.writeFieldEnd()
    if self.displayName is not None:
      oprot.writeFieldBegin('displayName', TType.STRING, 9)
      oprot.writeString(self.displayName)
      oprot.writeFieldEnd()
    if self.fullName is not None:
      oprot.writeFieldBegin('fullName', TType.STRING, 10)
      oprot.writeString(self.fullName)
      oprot.writeFieldEnd()
    if self.handle is not None:
      oprot.writeFieldBegin('handle', TType.STRING, 11)
      oprot.writeString(self.handle)
      oprot.writeFieldEnd()
    if self.hasCallEquipment is not None:
      oprot.writeFieldBegin('hasCallEquipment', TType.BOOL, 12)
      oprot.writeBool(self.hasCallEquipment)
      oprot.writeFieldEnd()
    if self.homepage is not None:
      oprot.writeFieldBegin('homepage', TType.STRING, 13)
      oprot.writeString(self.homepage)
      oprot.writeFieldEnd()
    if self.isAuthorized is not None:
      oprot.writeFieldBegin('isAuthorized', TType.BOOL, 14)
      oprot.writeBool(self.isAuthorized)
      oprot.writeFieldEnd()
    if self.isBlocked is not None:
      oprot.writeFieldBegin('isBlocked', TType.BOOL, 15)
      oprot.writeBool(self.isBlocked)
      oprot.writeFieldEnd()
    if self.isCallForwardActive is not None:
      oprot.writeFieldBegin('isCallForwardActive', TType.BOOL, 16)
      oprot.writeBool(self.isCallForwardActive)
      oprot.writeFieldEnd()
    if self.isSkypeOutContact is not None:
      oprot.writeFieldBegin('isSkypeOutContact', TType.BOOL, 17)
      oprot.writeBool(self.isSkypeOutContact)
      oprot.writeFieldEnd()
    if self.isVideoCapable is not None:
      oprot.writeFieldBegin('isVideoCapable', TType.BOOL, 18)
      oprot.writeBool(self.isVideoCapable)
      oprot.writeFieldEnd()
    if self.isVoicemailCapable is not None:
      oprot.writeFieldBegin('isVoicemailCapable', TType.BOOL, 19)
      oprot.writeBool(self.isVoicemailCapable)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 20)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.languageCode is not None:
      oprot.writeFieldBegin('languageCode', TType.STRING, 21)
      oprot.writeString(self.languageCode)
      oprot.writeFieldEnd()
    if self.lastOnline is not None:
      oprot.writeFieldBegin('lastOnline', TType.I32, 22)
      oprot.writeI32(self.lastOnline)
      oprot.writeFieldEnd()
    if self.moodText is not None:
      oprot.writeFieldBegin('moodText', TType.STRING, 24)
      oprot.writeString(self.moodText)
      oprot.writeFieldEnd()
    if self.numberOfAuthBuddies is not None:
      oprot.writeFieldBegin('numberOfAuthBuddies', TType.I16, 25)
      oprot.writeI16(self.numberOfAuthBuddies)
      oprot.writeFieldEnd()
    if self.onlineStatus is not None:
      oprot.writeFieldBegin('onlineStatus', TType.STRING, 26)
      oprot.writeString(self.onlineStatus)
      oprot.writeFieldEnd()
    if self.phoneHome is not None:
      oprot.writeFieldBegin('phoneHome', TType.STRING, 27)
      oprot.writeString(self.phoneHome)
      oprot.writeFieldEnd()
    if self.phoneMobile is not None:
      oprot.writeFieldBegin('phoneMobile', TType.STRING, 28)
      oprot.writeString(self.phoneMobile)
      oprot.writeFieldEnd()
    if self.phoneOffice is not None:
      oprot.writeFieldBegin('phoneOffice', TType.STRING, 29)
      oprot.writeString(self.phoneOffice)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 30)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.receivedAuthRequest is not None:
      oprot.writeFieldBegin('receivedAuthRequest', TType.STRING, 31)
      oprot.writeString(self.receivedAuthRequest)
      oprot.writeFieldEnd()
    if self.richMoodText is not None:
      oprot.writeFieldBegin('richMoodText', TType.STRING, 32)
      oprot.writeString(self.richMoodText)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.STRING, 33)
      oprot.writeString(self.sex)
      oprot.writeFieldEnd()
    if self.speedDial is not None:
      oprot.writeFieldBegin('speedDial', TType.STRING, 34)
      oprot.writeString(self.speedDial)
      oprot.writeFieldEnd()
    if self.timezone is not None:
      oprot.writeFieldBegin('timezone', TType.I32, 35)
      oprot.writeI32(self.timezone)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.about is None:
      raise TProtocol.TProtocolException(message='Required field about is unset!')
    if self.buddyStatus is None:
      raise TProtocol.TProtocolException(message='Required field buddyStatus is unset!')
    if self.canLeaveVoicemail is None:
      raise TProtocol.TProtocolException(message='Required field canLeaveVoicemail is unset!')
    if self.city is None:
      raise TProtocol.TProtocolException(message='Required field city is unset!')
    if self.country is None:
      raise TProtocol.TProtocolException(message='Required field country is unset!')
    if self.countryCode is None:
      raise TProtocol.TProtocolException(message='Required field countryCode is unset!')
    if self.displayName is None:
      raise TProtocol.TProtocolException(message='Required field displayName is unset!')
    if self.fullName is None:
      raise TProtocol.TProtocolException(message='Required field fullName is unset!')
    if self.handle is None:
      raise TProtocol.TProtocolException(message='Required field handle is unset!')
    if self.hasCallEquipment is None:
      raise TProtocol.TProtocolException(message='Required field hasCallEquipment is unset!')
    if self.homepage is None:
      raise TProtocol.TProtocolException(message='Required field homepage is unset!')
    if self.isAuthorized is None:
      raise TProtocol.TProtocolException(message='Required field isAuthorized is unset!')
    if self.isBlocked is None:
      raise TProtocol.TProtocolException(message='Required field isBlocked is unset!')
    if self.isCallForwardActive is None:
      raise TProtocol.TProtocolException(message='Required field isCallForwardActive is unset!')
    if self.isSkypeOutContact is None:
      raise TProtocol.TProtocolException(message='Required field isSkypeOutContact is unset!')
    if self.isVideoCapable is None:
      raise TProtocol.TProtocolException(message='Required field isVideoCapable is unset!')
    if self.isVoicemailCapable is None:
      raise TProtocol.TProtocolException(message='Required field isVoicemailCapable is unset!')
    if self.language is None:
      raise TProtocol.TProtocolException(message='Required field language is unset!')
    if self.languageCode is None:
      raise TProtocol.TProtocolException(message='Required field languageCode is unset!')
    if self.lastOnline is None:
      raise TProtocol.TProtocolException(message='Required field lastOnline is unset!')
    if self.moodText is None:
      raise TProtocol.TProtocolException(message='Required field moodText is unset!')
    if self.numberOfAuthBuddies is None:
      raise TProtocol.TProtocolException(message='Required field numberOfAuthBuddies is unset!')
    if self.onlineStatus is None:
      raise TProtocol.TProtocolException(message='Required field onlineStatus is unset!')
    if self.phoneHome is None:
      raise TProtocol.TProtocolException(message='Required field phoneHome is unset!')
    if self.phoneMobile is None:
      raise TProtocol.TProtocolException(message='Required field phoneMobile is unset!')
    if self.phoneOffice is None:
      raise TProtocol.TProtocolException(message='Required field phoneOffice is unset!')
    if self.province is None:
      raise TProtocol.TProtocolException(message='Required field province is unset!')
    if self.receivedAuthRequest is None:
      raise TProtocol.TProtocolException(message='Required field receivedAuthRequest is unset!')
    if self.richMoodText is None:
      raise TProtocol.TProtocolException(message='Required field richMoodText is unset!')
    if self.sex is None:
      raise TProtocol.TProtocolException(message='Required field sex is unset!')
    if self.speedDial is None:
      raise TProtocol.TProtocolException(message='Required field speedDial is unset!')
    if self.timezone is None:
      raise TProtocol.TProtocolException(message='Required field timezone is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthenticationException(TException):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthenticationException')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
